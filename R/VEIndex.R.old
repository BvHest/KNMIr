#' calculate the VE index
#'
#' This function calculates the VE index, which is one of the statistics that represents the total
#' amount of heat in a season that is bennefical to the growth of plants. More specific, its used to
#' measure the amount of warmth that is required by grapes to start growing, blosson and ripen.
#'
#' It is calculated as the cumulitive summation over the days of the year of the mean of the daily
#' minimum temperature (in degrees Celcius) substracted with 10 (the temperature at wihch grapes
#' start growing). This value is only added to the total when its positive.
#' The default summation interval, from the first of April until the end of September, has been altered
#' to be able to deal with cool-climate winegrowing that requires a prolonged growing season.
#'
#' Documentation: https://de.wikipedia.org/wiki/Wachstumsgradtag
#'
#' @param dgg dotaframe containing two mandatory columns; the day-of-the-year (dagVjaar), the daily mean temperature (gemTemp) and an optional column containing the year (jaar). Temperatures in degrees Celcius. The data frame can contain the ranges for multiple years.
#' @param startDate the start of the summation interval, formatted as a string 'yyyy-mm-dd'. Defaults to the start of the year.
#' @param endDate the end of the summation interval, formatted as a string 'yyyy-mm-dd'. Defaults to the end of the year.
#' @return dataframe containing the year (jaar), the day-of-the-year (dagVjaar) and the VE-index at the dagVjaar.
#' @keywords value aggregation
#' @export

berekenVEIndex <- function(dgg,
                           startDate = paste(format(Sys.Date(), format="%Y"), "01-01", sep="-"),
                           endDate = paste(format(Sys.Date(), format="%Y"), "12-31", sep="-")) {

   attach(dgg)

   # convert to day-of-year:
   doyStart <- yday(startDate)
   doyEnd <- yday(endDate)

   # subset op basis van de start en eind datum:
   range <- dgg[dagVjaar>=doyStart & dagVjaar<=doyEnd,]
   # wanneer afwezig; voeg de jaar-kolom toe:
   if (!("jaar" %in% names(dgg))) {
      range$jaar <- format(Sys.Date(), format="%Y")
   }

   # bereken de dagwaaarde:
   range$VEIndex <- pmax((knmi.daggegevens$gemTemp-10), 0)
   # bereken nu de cumulatieve HuglinIndex:
   range <- ddply(range, .(jaar), transform, somVEIndex = cumsum(VEIndex))

   detach(dgg)
   range[,c("jaar", "dagVjaar", "somVEIndex")]
}
